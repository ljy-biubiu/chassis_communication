#ifndef COMMON_VALUE_HPP
#define COMMON_VALUE_HPP

#include <iostream>
#include <common_type.hpp>

#define MODULE_PARAM_TABLE_ELE_NUM  (sizeof(module_param_table)/sizeof(module_param_table[0]))
#define LOW_RECEIVE_BUFFER_THRESHOLD    10   
#define RECV_STATE_FINDING_HEADER       0
#define RECV_STATE_CHECK_FIXED_HEADER   1
#define RECV_STATE_RECEIVING_CRC        2
#define RECEIVE_RING_ADD(start, cnt)    ( (start + (cnt) )% RECEIVE_BUFFER_SIZE )
#define RECEIVE_RING_MINUS(start, cnt)  ( (start + RECEIVE_BUFFER_SIZE - (cnt)) % RECEIVE_BUFFER_SIZE )
#define MAX_CMD_OVERTIME_VALUE          15.0 //秒
const unsigned char serial_frame_header[FRAME_HEADER_SIZE] = {'C', 'T', 'R', 'L'};
#define FIRMWARE_PACKET_SIZE            256
#define GET_ARRAY_ELE_NUM(x)            (sizeof(x)/sizeof(x[0]))
#define MODULE_SELF                     MODULE_CONTROL_PC
#define MAX_CMD_RESEND_TIME             5
#define UPDATE_START 1 
#define UPDATE_FAILED 2
#define UPDATE_SUCCESSED 0
#define UPDATE_ING 3
#define MAX_TIME_STRING_LEN 128 
//模块地址定义
enum
{
    MODULE_NONE = 0,
    MODULE_DEBUG_BOARD = 1,  //10-10 belongs to normal modules   
    MODULE_CONTROL_PC = 2,
    MODULE_MOVE_CONTROL_BOARD = 3,
    MODULE_POWER_INTEGRATE_BOARD = 4,
    MODULE_SWEEPING_BOX_BOARD = 5,
    MODULE_DUSTBOX = 6,
    MODULE_GPS = 7,
    MODULE_POWER_BOARD = 8,
    
    MODULE_MOTOR_DRIVER_START = 10,  //10-29 belongs to motor drivers
    MODULE_MOTOR_DRIVER_FRONT_LEFT = MODULE_MOTOR_DRIVER_START,
    MODULE_MOTOR_DRIVER_FRONT_RIGHT = 11,
    MODULE_MOTOR_DRIVER_BACK_LEFT = 12,
    MODULE_MOTOR_DRIVER_BACK_RIGHT = 13,
    MODULE_MOTOR_TURN_FRONT = 14,
    MODULE_MOTOR_TURN_BACK = 15,
    MODULE_MOTOR_BRAKE_FRONT = 16,
    MODULE_MOTOR_BREAK_BACK = 17,
    MODULE_MOTOR_DRIVER_END = MODULE_MOTOR_BREAK_BACK,

    MODULE_MOTOR_ROLLS_BRUSHES = 20,

    MODULE_LIGHT_START = 30,  //30-49 belongs to lights
    MODULE_LIGHT_FRONT_LEFT = MODULE_LIGHT_START,
    MODULE_LIGHT_FRONT_RIGHT = 31,
    MODULE_LIGHT_BACK_LEFT = 32,
    MODULE_LIGHT_BACK_RIGHT = 33,
    MODULE_LIGHT_BACK = 34,
    MODULE_LIGHT_HEAD = 35,
    MODULE_LIGHT_END = MODULE_LIGHT_HEAD,
    MODULE_LIGHT_TAPE = 39,

    MODULE_MOTOR_CONTROL_BOARD = 40, //40-55 belongs to motor control
    MODULE_MOTOR_CONTROL_BOARD1 = 41,
    MODULE_MOTOR_CONTROL_BOARD2 = 42,
    MODULE_MOTOR_CONTROL_BOARD3 = 43,
    MODULE_MOTOR_CONTROL_BOARD4 = 44,
    MODULE_MOTOR_CONTROL_BOARD5 = 45,
    MODULE_MOTOR_CONTROL_BOARD6 = 46,
    MODULE_MOTOR_CONTROL_BOARD7 = 47,
    MODULE_MOTOR_CONTROL_BOARD8 = 48,
    MODULE_MOTOR_CONTROL_BOARD9 = 49,
    MODULE_MOTOR_CONTROL_BOARD10 = 50,
    MODULE_MOTOR_CONTROL_BOARD11 = 51,
    MODULE_MOTOR_CONTROL_BOARD12 = 52,
    MODULE_MOTOR_CONTROL_BOARD13 = 53,
    MODULE_MOTOR_CONTROL_BOARD14 = 54,
    MODULE_MOTOR_CONTROL_BOARD15 = 55,

    MODULE_ULTRASONIC_START = 60, //60-75 belongs to ultrasonic
    MODULE_ULTRASONIC_MASTER = MODULE_ULTRASONIC_START,
    MODULE_ULTRASONIC_1 = 61,
    MODULE_ULTRASONIC_2 = 62,
    MODULE_ULTRASONIC_3 = 63,
    MODULE_ULTRASONIC_4 = 64,
    MODULE_ULTRASONIC_5 = 65,
    MODULE_ULTRASONIC_6 = 66,
    MODULE_ULTRASONIC_7 = 67,
    MODULE_ULTRASONIC_8 = 68,
    MODULE_ULTRASONIC_9 = 69,
    MODULE_ULTRASONIC_10 = 70,
    MODULE_ULTRASONIC_11 = 71,
    MODULE_ULTRASONIC_12 = 72,
    MODULE_ULTRASONIC_13 = 73,
    MODULE_ULTRASONIC_14 = 74,
    MODULE_ULTRASONIC_15 = 75,
    MODULE_ULTRASONIC_END,

    MODULE_BELOW_START = 80,  //ohter modules start
    MODULE_CHECK_UPD = 81,
    MAX_MODULE,
};

//参数列表
const module_param_table_type module_param_table[] = 
{
    //module_id                         //update module name                //bin file name
    {MODULE_DEBUG_BOARD,                "MODULE_DEBUG_BOARD",               "MODULE_DEBUG_BOARD.BIN"},
    //no need to upgrade self
    //{MODULE_CONTROL_PC,                 "MODULE_CONTROL_PC",                "MODULE_CONTROL_PC.BIN"},
    {MODULE_MOVE_CONTROL_BOARD,         "MODULE_MOVE_CONTROL_BOARD",        "MODULE_MOVE_CONTROL_BOARD.BIN"},
    {MODULE_POWER_INTEGRATE_BOARD,      "MODULE_POWER_INTEGRATE_BOARD",     "MODULE_POWER_INTEGRATE_BOARD.BIN"},
    {MODULE_SWEEPING_BOX_BOARD,         "MODULE_SWEEPING_BOX_BOARD",        "MODULE_SWEEPING_BOX_BOARD.BIN"},
    {MODULE_DUSTBOX,                    "MODULE_DUSTBOX",                   "MODULE_DUSTBOX.BIN"},
    {MODULE_GPS,                        "MODULE_GPS",                       "MODULE_GPS.BIN"},
    {MODULE_POWER_BOARD,                "MODULE_POWER_BOARD",               "MODULE_POWER_BOARD.BIN"},

    {MODULE_MOTOR_DRIVER_FRONT_LEFT,    "MODULE_MOTOR_DRIVER_FRONT_LEFT",   "MODULE_MOTOR_DRIVER_FRONT_LEFT.BIN"},
    {MODULE_MOTOR_DRIVER_FRONT_RIGHT,   "MODULE_MOTOR_DRIVER_FRONT_RIGHT",  "MODULE_MOTOR_DRIVER_FRONT_RIGHT.BIN"},
    {MODULE_MOTOR_DRIVER_BACK_LEFT,     "MODULE_MOTOR_DRIVER_BACK_LEFT",    "MODULE_MOTOR_DRIVER_BACK_LEFT.BIN"},
    {MODULE_MOTOR_DRIVER_BACK_RIGHT,    "MODULE_MOTOR_DRIVER_BACK_RIGHT",   "MODULE_MOTOR_DRIVER_BACK_RIGHT.BIN"},
    {MODULE_MOTOR_TURN_FRONT,           "MODULE_MOTOR_TURN_FRONT",          "MODULE_MOTOR_TURN_FRONT.BIN"},
    {MODULE_MOTOR_TURN_BACK,            "MODULE_MOTOR_TURN_BACK",           "MODULE_MOTOR_TURN_BACK.BIN"},
    {MODULE_MOTOR_BRAKE_FRONT,          "MODULE_MOTOR_BRAKE_FRONT",         "MODULE_MOTOR_BRAKE_FRONT.BIN"},
    {MODULE_MOTOR_BREAK_BACK,           "MODULE_MOTOR_BREAK_BACK",          "MODULE_MOTOR_BREAK_BACK.BIN"},

    {MODULE_MOTOR_ROLLS_BRUSHES,           "MODULE_MOTOR_ROLLS_BRUSHES",          "MODULE_MOTOR_ROLLS_BRUSHES.BIN"},

    {MODULE_LIGHT_FRONT_LEFT,           "MODULE_LIGHT_FRONT_LEFT",          "MODULE_LIGHT_FRONT_LEFT.BIN"},
    {MODULE_LIGHT_FRONT_RIGHT,          "MODULE_LIGHT_FRONT_RIGHT",         "MODULE_LIGHT_FRONT_RIGHT.BIN"},
    {MODULE_LIGHT_BACK_LEFT,            "MODULE_LIGHT_BACK_LEFT",           "MODULE_LIGHT_BACK_LEFT.BIN"},
    {MODULE_LIGHT_BACK_RIGHT,           "MODULE_LIGHT_BACK_RIGHT",          "MODULE_LIGHT_BACK_RIGHT.BIN"},
    {MODULE_LIGHT_BACK,                 "MODULE_LIGHT_BACK",                "MODULE_LIGHT_BACK.BIN"},
    {MODULE_LIGHT_HEAD,                 "MODULE_LIGHT_HEAD",                "MODULE_LIGHT_HEAD.BIN"},
    {MODULE_LIGHT_TAPE,                 "MODULE_LIGHT_TAPE",                "MODULE_LIGHT_TAPE.BIN"},	

    {MODULE_MOTOR_CONTROL_BOARD,            "MODULE_MOTOR_CONTROL_BOARD",           "MODULE_MOTOR_CONTROL_BOARD.BIN"},
    {MODULE_MOTOR_CONTROL_BOARD1,           "MODULE_MOTOR_CONTROL_BOARD1",          "MODULE_MOTOR_CONTROL_BOARD1.BIN"},
    {MODULE_MOTOR_CONTROL_BOARD2,           "MODULE_MOTOR_CONTROL_BOARD2",          "MODULE_MOTOR_CONTROL_BOARD2.BIN"},
    {MODULE_MOTOR_CONTROL_BOARD3,           "MODULE_MOTOR_CONTROL_BOARD3",          "MODULE_MOTOR_CONTROL_BOARD3.BIN"},
    {MODULE_MOTOR_CONTROL_BOARD4,           "MODULE_MOTOR_CONTROL_BOARD4",          "MODULE_MOTOR_CONTROL_BOARD4.BIN"},
    {MODULE_MOTOR_CONTROL_BOARD5,           "MODULE_MOTOR_CONTROL_BOARD5",          "MODULE_MOTOR_CONTROL_BOARD5.BIN"},
    {MODULE_MOTOR_CONTROL_BOARD6,           "MODULE_MOTOR_CONTROL_BOARD6",          "MODULE_MOTOR_CONTROL_BOARD6.BIN"},
    {MODULE_MOTOR_CONTROL_BOARD7,           "MODULE_MOTOR_CONTROL_BOARD7",          "MODULE_MOTOR_CONTROL_BOARD7.BIN"},
    {MODULE_MOTOR_CONTROL_BOARD8,           "MODULE_MOTOR_CONTROL_BOARD8",          "MODULE_MOTOR_CONTROL_BOARD8.BIN"},
    {MODULE_MOTOR_CONTROL_BOARD9,           "MODULE_MOTOR_CONTROL_BOARD9",          "MODULE_MOTOR_CONTROL_BOARD9.BIN"},
    {MODULE_MOTOR_CONTROL_BOARD10,          "MODULE_MOTOR_CONTROL_BOARD10",         "MODULE_MOTOR_CONTROL_BOARD10.BIN"},
    {MODULE_MOTOR_CONTROL_BOARD11,          "MODULE_MOTOR_CONTROL_BOARD11",         "MODULE_MOTOR_CONTROL_BOARD11.BIN"},
    {MODULE_MOTOR_CONTROL_BOARD12,          "MODULE_MOTOR_CONTROL_BOARD12",         "MODULE_MOTOR_CONTROL_BOARD12.BIN"},
    {MODULE_MOTOR_CONTROL_BOARD13,          "MODULE_MOTOR_CONTROL_BOARD13",         "MODULE_MOTOR_CONTROL_BOARD13.BIN"},
    {MODULE_MOTOR_CONTROL_BOARD14,          "MODULE_MOTOR_CONTROL_BOARD14",         "MODULE_MOTOR_CONTROL_BOARD14.BIN"},
    {MODULE_MOTOR_CONTROL_BOARD15,          "MODULE_MOTOR_CONTROL_BOARD15",         "MODULE_MOTOR_CONTROL_BOARD15.BIN"},

    {MODULE_ULTRASONIC_MASTER,          "MODULE_ULTRASONIC_MASTER",         "MODULE_ULTRASONIC_MASTER.BIN"},
    {MODULE_ULTRASONIC_1,               "MODULE_ULTRASONIC_1",              "MODULE_ULTRASONIC_1.BIN"},
    {MODULE_ULTRASONIC_2,               "MODULE_ULTRASONIC_2",              "MODULE_ULTRASONIC_2.BIN"},
    {MODULE_ULTRASONIC_3,               "MODULE_ULTRASONIC_3",              "MODULE_ULTRASONIC_3.BIN"},
    {MODULE_ULTRASONIC_4,               "MODULE_ULTRASONIC_4",              "MODULE_ULTRASONIC_4.BIN"},
    {MODULE_ULTRASONIC_5,               "MODULE_ULTRASONIC_5",              "MODULE_ULTRASONIC_5.BIN"},
    {MODULE_ULTRASONIC_6,               "MODULE_ULTRASONIC_6",              "MODULE_ULTRASONIC_6.BIN"},
    {MODULE_ULTRASONIC_7,               "MODULE_ULTRASONIC_7",              "MODULE_ULTRASONIC_7.BIN"},
    {MODULE_ULTRASONIC_8,               "MODULE_ULTRASONIC_8",              "MODULE_ULTRASONIC_8.BIN"},
    {MODULE_ULTRASONIC_9,               "MODULE_ULTRASONIC_9",              "MODULE_ULTRASONIC_9.BIN"},
    {MODULE_ULTRASONIC_10,              "MODULE_ULTRASONIC_10",             "MODULE_ULTRASONIC_10.BIN"},
    {MODULE_ULTRASONIC_11,              "MODULE_ULTRASONIC_11",             "MODULE_ULTRASONIC_11.BIN"},
    {MODULE_ULTRASONIC_12,              "MODULE_ULTRASONIC_12",             "MODULE_ULTRASONIC_12.BIN"},
    {MODULE_ULTRASONIC_13,              "MODULE_ULTRASONIC_13",             "MODULE_ULTRASONIC_13.BIN"},
    {MODULE_ULTRASONIC_14,              "MODULE_ULTRASONIC_14",             "MODULE_ULTRASONIC_14.BIN"},
    {MODULE_ULTRASONIC_15,              "MODULE_ULTRASONIC_15",             "MODULE_ULTRASONIC_15.BIN"},
};

//firmware_upgrade_flag
enum
{
    INFORM_UPDATE = 0,
    WAIT_INFORM_UPDATE_RESPOND,
    DELAY_SOME_TIME,
    SEND_MAIN_MODULE_ID,
    WAIT_MAIN_MODULE_ID_RESPOND,
    FIRMWARE_NORMAL,
    FIRMWARE_WAIT_CHECK_BEFORE_VERSION,
    FIRMWARE_CHECK_VERSION_OK,
    FIRMWARE_PRE_UPDATE,     //send cmd_200 cmd_201 to shake hands
    FIRMWARE_ATHENTICATION,  //athentication  cmd_201
    FIRMWARE_WAIT_START_UPDATE,  //wait reboot, wait cmd_202
    FIRMWARE_UPDATING,           //cmd_203 and wait cmd_204 
    FIRMWARE_UPDATED_REBOOT,     // send cmd_205 and wait cmd_205
    FIRMWARE_WAIT_FINISH_UPDATE, //wait cmd_206
    FIRMWARE_WAIT_CHECK_AFTER_VERSION,
    FIRMWARE_ABORT_UPGRADE,
    FIRMWARE_UPGRADE_FINISHED,
};

//失败状态列表
const unsigned char Control_fail_stage_string[][48] = 
{
    {"inform_update"},
    {"wait_inform_update_respond"},
    {"delay_some_time"},
    {"send_main_module_id"},
    {"wait_main_module_id_respond"},
    {"Normal"},
    {"Wait checking app version before"},
    {"Check version ok"},
    {"Pre update"},
    {"Athentication"},
    {"Waiting to start update"},
    {"Updating"},
    {"Updated and send reboot"},
    {"Wait finishing update"},
    {"Wait checking app version after"},
    {"Delete upgrade file"},
    {"Abort upgrade"},
    {"Upgrade finished"},
    {"Reserved"},
    {"Reserved"},
    {"Reserved"},
    {"Reserved"},
};
//manage updates state
enum
{
   INIT_UPDATE_LIST = 0,
   DO_UPDATE,
   RECORD_STATUS,
   REPORT_STATUS,
};




const unsigned char run_area_string[][10] =
{
    {"Boot"},
    {"App"},
    {"App2"},
    {"Reserved"},
    {"Reserved"},
};

const unsigned char target_status_string[][48]=
{
    {"Firmware Normal"},
    {"Firmware Pre update"},
    {"Firmware Updating"},
    {"Firmware Updated"},
    {"Reserved"},
    {"Reserved"},
    {"Reserved"},
};

enum
{
    NORMAL_SEND = 0,
    TRY_RESEND = 1,
    END_SEND = 2,
};



#endif